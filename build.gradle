#!groovy
// The above triggers groovy syntax highlighting in vim

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'net.saliman'
archivesBaseName = 'gradle-liquibase-plugin'
version = '3.3.x-SNAPSHOT'
ext.isSnapshot = version.endsWith('SNAPSHOT')

if ( isSnapshot ) {
  println "using snapshot"
  ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
  println "using staging"
  ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "2.3"
}

configurations { 
  archives
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile 'org.codehaus.groovy:groovy:2.4.1'
  compile gradleApi()
  compile 'org.liquibase:liquibase-core:3.3.2'
  runtime 'net.saliman:groovy-liquibase-dsl:1.0.0'
  archives "org.apache.maven.wagon:wagon-ssh:2.2"
  archives "org.apache.maven.wagon:wagon-ssh-external:2.2"
}

task sourceJar(type: Jar) {
  description = 'An archive of the source code for Maven Central'
  classifier = 'sources'
  from sourceSets.main.allSource
}


task groovydocJar(type: Jar, dependsOn: groovydoc) {
  description = 'An archive of the GroovyDocs for Maven Central'
  classifier = 'javadoc'
  from groovydoc
}

artifacts { 
  archives jar, groovydocJar, sourceJar
}

signing {
  sign configurations.archives
}

// Only *Require* signing if we are uploading a non snapshot version.  If we
// do need to sign, make sure we've got the properties we need to do the 
// signing.
import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
  tasks.withType(org.gradle.plugins.signing.Sign).all {
    required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
	  if ( required ) {
	    // Use Java's console to read from the console (no good for a CI
	    // environment)
	    Console console = System.console()
	    console.printf "\n\nWe have to sign some things in this build...\n\n"
  
      if ( !project.hasProperty('signing.keyId') ) {
        def id = console.readLine("PGP Public Key Id: ")
        allprojects { ext."signing.keyId" = id }
      }
  
	    if ( !project.hasProperty('signing.secretKeyRingFile') ) {
	      def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
	      allprojects { ext."signing.secretKeyRingFile" = file }
	    }
  
		  if ( !project.hasProperty('signing.password') ) {
			  def password = console.readPassword("PGP Private Key Password: ")
			  allprojects { ext."signing.password" = password }
	    }
  
		  console.printf "\nThanks.\n\n"
	  }
  }
}  

uploadArchives {
  // We can't use taskGraph.whenReady because it doesn't resolve until after
  // configuration.  The startParameter is not as good, but it probably
  // good enough for our purposes.
  if ( gradle.startParameter.taskNames.contains("uploadArchives") ) {
    // Use Java's console to read from the console (no good for a CI
    // environment)
    Console console = System.console()
    console.printf "\n\nWe have to upload some things in this build...\n\n"

    if ( !project.hasProperty('mavenCentralUsername') ) {
      def mavenCentralUsername = console.readLine("Maven Central Username: ")
      allprojects { ext."mavenCentralUsername" = mavenCentralUsername }
    }

    if ( !project.hasProperty('mavenCentralPassword') ) {
      def mavenCentralPassword = console.readLine("Maven Central Password: ")
      allprojects { ext."mavenCentralPassword" = mavenCentralPassword }
    }

    repositories {
      mavenDeployer {
        if ( signing.signatory ) {
          beforeDeployment { signing.signPom(it) }
        }
        configuration = configurations.archives
        //repository(url: "file://$buildDir/m2repo")
        repository(url: mavenCentralUploadUrl) {
          authentication(userName: mavenCentralUsername,
                  password: mavenCentralPassword)
          releases(updatePolicy: "always")
          snapshots(updatePolicy: "always")
        }
        pom.project(pomConfiguration)
      }
    }
  }
}

def getPomConfiguration() { 
  return {
    name('Gradle Liquibase Plugin')
    packaging 'jar'
    description('A Gradle plugin for the Liquibase database refactoring tool.')
    url('https://github.com/tlberglund/gradle-liquibase-plugin')
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
    developers {
      developer {
        id('tlberglund')
        name('Tim Berglund')
        email('tlberglund@gmail.com')
      }
	    developer {
		    id 'stevesaliman'
		    name 'Steven C. Saliman'
		    email 'support@saliman.net'
	    }
    }
    scm {
      connection('scm:https://tlberglund@github.com/tlberglund/gradle-liquibase-plugin')
      developerConnection('scm:git@github.com:tlberglund/gradle-liquibase-plugin.git')
      url('https://github.com/tlberglund/gradle-liquibase-plugin')
    }
  }
}

